{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andra\\\\OneDrive\\\\Desktop\\\\React\\\\portfolio\\\\src\\\\container\\\\Header\\\\AnimatedText.js\";\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\n// Word wrapper\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = props => {\n  // We'll do this to prevent wrapping of words using CSS\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"word-wrapper\",\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n};\n\n// Map API \"type\" vaules to JSX tag names\n_c = Wrapper;\nconst tagMap = {\n  paragraph: \"p\",\n  heading1: \"h1\",\n  heading2: \"h2\"\n};\n\n// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nconst AnimatedCharacters = props => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      color: \"#FFFFFF\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.85\n      }\n    },\n    visible: {\n      y: 0,\n      color: \"#FF0088\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.75\n      }\n    }\n  };\n\n  //  Split each word of props.text into an array\n  const splitWords = props.text.split(\" \");\n\n  // Create storage array\n  const words = [];\n\n  // Push each word into words array\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map(word => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    children: words.map((word, index) => {\n      return (\n        /*#__PURE__*/\n        // Wrap each word in the Wrapper component\n        _jsxDEV(Wrapper, {\n          children: words[index].flat().map((element, index) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                overflow: \"hidden\",\n                display: \"inline-block\"\n              },\n              children: /*#__PURE__*/_jsxDEV(motion.span, {\n                style: {\n                  display: \"inline-block\"\n                },\n                variants: item,\n                children: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_c2 = AnimatedCharacters;\nexport default AnimatedCharacters;\nvar _c, _c2;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"AnimatedCharacters\");","map":{"version":3,"names":["React","motion","Wrapper","props","children","tagMap","paragraph","heading1","heading2","AnimatedCharacters","item","hidden","y","color","transition","ease","duration","visible","splitWords","text","split","words","entries","push","map","word","Tag","type","index","flat","element","overflow","display"],"sources":["C:/Users/andra/OneDrive/Desktop/React/portfolio/src/container/Header/AnimatedText.js"],"sourcesContent":["import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\n// Word wrapper\r\nconst Wrapper = (props) => {\r\n  // We'll do this to prevent wrapping of words using CSS\r\n  return <span className=\"word-wrapper\">{props.children}</span>;\r\n};\r\n\r\n// Map API \"type\" vaules to JSX tag names\r\nconst tagMap = {\r\n  paragraph: \"p\",\r\n  heading1: \"h1\",\r\n  heading2: \"h2\"\r\n};\r\n\r\n// AnimatedCharacters\r\n// Handles the deconstruction of each word and character to setup for the\r\n// individual character animations\r\nconst AnimatedCharacters = (props) => {\r\n  // Framer Motion variant object, for controlling animation\r\n  const item = {\r\n    hidden: {\r\n      y: \"200%\",\r\n      color: \"#FFFFFF\",\r\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.85 }\r\n    },\r\n    visible: {\r\n      y: 0,\r\n      color: \"#FF0088\",\r\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.75 }\r\n    }\r\n  };\r\n\r\n  //  Split each word of props.text into an array\r\n  const splitWords = props.text.split(\" \");\r\n\r\n  // Create storage array\r\n  const words = [];\r\n\r\n  // Push each word into words array\r\n  for (const [, item] of splitWords.entries()) {\r\n    words.push(item.split(\"\"));\r\n  }\r\n\r\n  // Add a space (\"\\u00A0\") to the end of each word\r\n  words.map((word) => {\r\n    return word.push(\"\\u00A0\");\r\n  });\r\n\r\n  // Get the tag name from tagMap\r\n  const Tag = tagMap[props.type];\r\n\r\n  return (\r\n    <Tag>\r\n      {words.map((word, index) => {\r\n        return (\r\n          // Wrap each word in the Wrapper component\r\n          <Wrapper key={index}>\r\n            {words[index].flat().map((element, index) => {\r\n              return (\r\n                <span\r\n                  style={{\r\n                    overflow: \"hidden\",\r\n                    display: \"inline-block\"\r\n                  }}\r\n                  key={index}\r\n                >\r\n                  <motion.span\r\n                    style={{ display: \"inline-block\" }}\r\n                    variants={item}\r\n                  >\r\n                    {element}\r\n                  </motion.span>\r\n                </span>\r\n              );\r\n            })}\r\n          </Wrapper>\r\n        );\r\n      })}\r\n      {/* {} */}\r\n    </Tag>\r\n  );\r\n};\r\n\r\nexport default AnimatedCharacters;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,eAAe;;AAEtC;AAAA;AACA,MAAMC,OAAO,GAAIC,KAAK,IAAK;EACzB;EACA,oBAAO;IAAM,SAAS,EAAC,cAAc;IAAA,UAAEA,KAAK,CAACC;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAQ;AAC/D,CAAC;;AAED;AAAA,KALMF,OAAO;AAMb,MAAMG,MAAM,GAAG;EACbC,SAAS,EAAE,GAAG;EACdC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA,MAAMC,kBAAkB,GAAIN,KAAK,IAAK;EACpC;EACA,MAAMO,IAAI,GAAG;IACXC,MAAM,EAAE;MACNC,CAAC,EAAE,MAAM;MACTC,KAAK,EAAE,SAAS;MAChBC,UAAU,EAAE;QAAEC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QAAEC,QAAQ,EAAE;MAAK;IAClE,CAAC;IACDC,OAAO,EAAE;MACPL,CAAC,EAAE,CAAC;MACJC,KAAK,EAAE,SAAS;MAChBC,UAAU,EAAE;QAAEC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC;QAAEC,QAAQ,EAAE;MAAK;IAClE;EACF,CAAC;;EAED;EACA,MAAME,UAAU,GAAGf,KAAK,CAACgB,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC;;EAExC;EACA,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,MAAM,GAAGX,IAAI,CAAC,IAAIQ,UAAU,CAACI,OAAO,EAAE,EAAE;IAC3CD,KAAK,CAACE,IAAI,CAACb,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAAC;EAC5B;;EAEA;EACAC,KAAK,CAACG,GAAG,CAAEC,IAAI,IAAK;IAClB,OAAOA,IAAI,CAACF,IAAI,CAAC,QAAQ,CAAC;EAC5B,CAAC,CAAC;;EAEF;EACA,MAAMG,GAAG,GAAGrB,MAAM,CAACF,KAAK,CAACwB,IAAI,CAAC;EAE9B,oBACE,QAAC,GAAG;IAAA,UACDN,KAAK,CAACG,GAAG,CAAC,CAACC,IAAI,EAAEG,KAAK,KAAK;MAC1B;QAAA;QACE;QACA,QAAC,OAAO;UAAA,UACLP,KAAK,CAACO,KAAK,CAAC,CAACC,IAAI,EAAE,CAACL,GAAG,CAAC,CAACM,OAAO,EAAEF,KAAK,KAAK;YAC3C,oBACE;cACE,KAAK,EAAE;gBACLG,QAAQ,EAAE,QAAQ;gBAClBC,OAAO,EAAE;cACX,CAAE;cAAA,uBAGF,QAAC,MAAM,CAAC,IAAI;gBACV,KAAK,EAAE;kBAAEA,OAAO,EAAE;gBAAe,CAAE;gBACnC,QAAQ,EAAEtB,IAAK;gBAAA,UAEdoB;cAAO;gBAAA;gBAAA;gBAAA;cAAA;YACI,GAPTF,KAAK;cAAA;cAAA;cAAA;YAAA,QAQL;UAEX,CAAC;QAAC,GAlBUA,KAAK;UAAA;UAAA;UAAA;QAAA;MAmBT;IAEd,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEE;AAEV,CAAC;AAAC,MAhEInB,kBAAkB;AAkExB,eAAeA,kBAAkB;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}